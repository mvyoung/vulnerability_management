import time
import openpyxl
import shutil
import sys
import warnings
import re
import os
import platform

# implement OrderedDict
# http://stackoverflow.com/questions/10849657/can-i-make-an-array-of-variables-with-python
# http://stackoverflow.com/questions/21062781/shortest-way-to-get-first-item-of-ordereddict-in-python-3


# takes care of "UserWarning: Discarded range with reserved name"
warnings.filterwarnings("ignore")

# all files in Owner_Sheets/ must end with _Vuln_Report.xlsx to be detected as a valid vuln sheet
# all files in Raw_Scans/ must start with the owner name or at least be a partial for an owner in all_owners to be detected as a raw scan sheet
# owners cannot have - or _ in them because it will never match filenames which are delimited by - and _ in 
all_owners = ["owner_names"]

relevant_sev_override = ["account", "password", "authentication", "unencrypted", "null"]

relevant_severity = ["3", "4", "5", "Severity"]

irrelevant_sev_keywords = ["Administrator Account's Password Does Not Expire"]

sec_in_month = 2419200
header_rows = 10

def copy_over(sheet, row_number, ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed):
   sheet.cell(column = 1, row = row_number, value = ip)
   sheet.cell(column = 2, row = row_number, value = dns)
   sheet.cell(column = 3, row = row_number, value = netbios)
   sheet.cell(column = 4, row = row_number, value = tracking_method)
   sheet.cell(column = 5, row = row_number, value = os)
   sheet.cell(column = 6, row = row_number, value = IPstatus)
   sheet.cell(column = 7, row = row_number, value = qid)
   sheet.cell(column = 8, row = row_number, value = title)
   sheet.cell(column = 9, row = row_number, value = vuln_status)
   sheet.cell(column = 10, row = row_number, value = type)
   sheet.cell(column = 11, row = row_number, value = severity)
   sheet.cell(column = 12, row = row_number, value = port)
   sheet.cell(column = 13, row = row_number, value = protocol)
   sheet.cell(column = 14, row = row_number, value = FQDN)
   sheet.cell(column = 15, row = row_number, value = ssl)
   sheet.cell(column = 16, row = row_number, value = first_detected)
   sheet.cell(column = 17, row = row_number, value = last_detected)
   sheet.cell(column = 18, row = row_number, value = times_detected)
   sheet.cell(column = 19, row = row_number, value = CVEid)
   sheet.cell(column = 20, row = row_number, value = VendorReference)
   sheet.cell(column = 21, row = row_number, value = bugtraqID)
   sheet.cell(column = 22, row = row_number, value = threat)
   sheet.cell(column = 23, row = row_number, value = impact)
   sheet.cell(column = 24, row = row_number, value = solution)
   sheet.cell(column = 25, row = row_number, value = exploitability)
   #sheet.cell(column = 26, row = row_number, value = associated_malware)
   sheet.cell(column = 26, row = row_number, value = results)
   sheet.cell(column = 27, row = row_number, value = PCIvuln)
   sheet.cell(column = 28, row = row_number, value = ticket_state)
   sheet.cell(column = 29, row = row_number, value = instance)
   sheet.cell(column = 30, row = row_number, value = category)
   sheet.cell(column = 31, row = row_number, value = date_last_fixed)

   return sheet

def parse_raw_vulns(owner, raw_vulns_sheet, new_sheet):
   raw_dict = {}
   count = 0
   row_count = 1
   success = True
   incorrect_column = -1

   for row in raw_vulns_sheet.iter_rows(row_offset=header_rows):
      ndx = 0
      qid = -1
      ip = ""
      port = -1
      severity = -1

      #ip
      dns = ""
      netbios = ""
      tracking_method = ""
      os = ""
      IPstatus = ""
      #qid
      title = ""
      vuln_status = ""
      type = ""
      # severity >= 3
      #port = ""
      protocol = ""
      FQDN = ""
      ssl = ""
      first_detected = ""
      last_detected = ""
      times_detected = ""
      CVEid = ""
      VendorReference = ""
      bugtraqID = ""
      threat = ""
      impact = ""
      solution = ""
      exploitability = ""
      results = ""
      PCIvuln = ""
      ticket_state = ""
      instance = ""
      category = ""
      date_last_fixed = ""

      # iterate through all cells in a row to populate all the variables needed for a new vuln instance
      for cell in row:
         if ndx == 0:
            if row_count == 1 and cell.value != "IP":
               success = False
               incorrect_column = ndx
            ip = cell.value
         if ndx == 1:
            if row_count == 1 and cell.value != "DNS":
               success = False
               incorrect_column = ndx
            dns = cell.value
         if ndx == 2:
            if row_count == 1 and cell.value != "NetBIOS":
               success = False
               incorrect_column = ndx
            netbios = cell.value
         if ndx == 3:
            if row_count == 1 and cell.value != "Tracking Method":
               success = False
               incorrect_column = ndx
            tracking_method = cell.value
         if ndx == 4:
            if row_count == 1 and cell.value != "OS":
               success = False
               incorrect_column = ndx
            os = cell.value
         if ndx == 5:
            if row_count == 1 and cell.value != "IP Status":
               success = False
               incorrect_column = ndx
            IPstatus = cell.value
         if ndx == 6:
            if row_count == 1 and cell.value != "QID":
               success = False
               incorrect_column = ndx
            qid = cell.value
         if ndx == 7:
            if row_count == 1 and cell.value != "Title":
               success = False
               incorrect_column = ndx
            title = cell.value
         if ndx == 8:
            if row_count == 1 and cell.value != "Vuln Status":
               success = False
               incorrect_column = ndx
            vuln_status = cell.value
         if ndx == 9:
            if row_count == 1 and cell.value != "Type":
               success = False
               incorrect_column = ndx
            type = cell.value
         if ndx == 10:
            if row_count == 1 and cell.value != "Severity":
               success = False
               incorrect_column = ndx
            severity = cell.value
         if ndx == 11:
            if row_count == 1 and cell.value != "Port":
               success = False
               incorrect_column = ndx
            port = cell.value
         if ndx == 12:
            if row_count == 1 and cell.value != "Protocol":
               success = False
               incorrect_column = ndx
            protocol = cell.value
         if ndx == 13:
            if row_count == 1 and cell.value != "FQDN":
               success = False
               incorrect_column = ndx
            FQDN = cell.value
         if ndx == 14:
            if row_count == 1 and cell.value != "SSL":
               success = False
               incorrect_column = ndx
            ssl = cell.value
         if ndx == 15:
            if row_count == 1 and cell.value != "First Detected":
               success = False
               incorrect_column = ndx
            first_detected = cell.value
         if ndx == 16:
            if row_count == 1 and cell.value != "Last Detected":
               success = False
               incorrect_column = ndx
            last_detected = cell.value
         if ndx == 17:
            if row_count == 1 and cell.value != "Times Detected":
               success = False
               incorrect_column = ndx
            times_detected = cell.value
         if ndx == 18:
            if row_count == 1 and cell.value != "Date Last Fixed":
               success = False
               incorrect_column = ndx
            date_last_fixed = cell.value
         if ndx == 19:
            if row_count == 1 and cell.value != "CVE ID":
               success = False
               incorrect_column = ndx
            CVEid = cell.value
         if ndx == 20:
            if row_count == 1 and cell.value != "Vendor Reference":
               success = False
               incorrect_column = ndx
            VendorReference = cell.value
         if ndx == 21:
            if row_count == 1 and cell.value != "Bugtraq ID":
               success = False
               incorrect_column = ndx
            bugtraqID = cell.value
         if ndx == 22:
            if row_count == 1 and cell.value != "Threat":
               success = False
               incorrect_column = ndx
            threat = cell.value
         if ndx == 23:
            if row_count == 1 and cell.value != "Impact":
               success = False
               incorrect_column = ndx
            impact = cell.value
         if ndx == 24:
            if row_count == 1 and cell.value != "Solution":
               success = False
               incorrect_column = ndx
            solution = cell.value
         if ndx == 25:
            if row_count == 1 and cell.value != "Exploitability":
               success = False
               incorrect_column = ndx
            exploitability = cell.value
         if ndx == 26:
            if row_count == 1 and cell.value != "Results":
               success = False
               incorrect_column = ndx
            results = cell.value
         if ndx == 27:
            if row_count == 1 and cell.value != "PCI Vuln":
               success = False
               incorrect_column = ndx
            PCIvuln = cell.value
         if ndx == 28:
            if row_count == 1 and cell.value != "Ticket State":
               success = False
               incorrect_column = ndx
            ticket_state = cell.value
         if ndx == 29:
            if row_count == 1 and cell.value != "Instance":
               success = False
               incorrect_column = ndx
            instance = cell.value
         if ndx == 30:
            if row_count == 1 and cell.value != "Category":
               success = False
               incorrect_column = ndx
            category = cell.value
         ndx += 1

      if type is not None:
         if type.lower() != "ig" and type.lower() != "practice":
            if str(severity) not in relevant_severity:
               for key in relevant_sev_override:
                  if title is not None and key in title.lower() and title not in irrelevant_sev_keywords:
                     new_sheet = copy_over(new_sheet, row_count, ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed)
                     row_count += 1
                     break
            else:
               new_sheet = copy_over(new_sheet, row_count, ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed)
               row_count += 1

   if success:
      print(owner + " has " + str(row_count - 2) + " vulns")
   return success, incorrect_column

def find_available_raw_scans_owners():
   owners = []

   if platform.system() == 'Windows':
      for file in os.listdir("Raw_Scans/"):
         if file.endswith(".xlsx") and not file.endswith("-raw-vulns.xlsx"):
            if (int(time.time()) - os.path.getmtime("Raw_Scans/" + file)) <= sec_in_month:
               # wrapping in [] fixes typeerror generator object is not subscriptable
               # converts generator object into list, grabs first item in list and casts as string
               # includes only the owners that contain the first string segment of filename which is delimited by - and _
               item = list([owner for owner in all_owners if re.split(r'-|_', file)[0].lower() in owner.lower()])
               if item:
                  item = item[0]
                  owners.append(item)
   else:
      print("Not a Windows system")
      sys.exit(1)

   return owners

def find_raw_scan_for_owner(owner):
   if platform.system() == 'Windows':
      for file in os.listdir("Raw_Scans/"):
         if file.endswith(".xlsx"):
            if (int(time.time()) - os.path.getmtime("Raw_Scans/" + file)) <= sec_in_month:
               if re.split(r'-|_', file)[0].lower() in owner.lower():
                  return file
   else:
      print("Not a Windows system")
      sys.exit(1)

   return None

def prep_raw(owner):
   raw_scan = find_raw_scan_for_owner(owner)

   raw_vulns = openpyxl.load_workbook("Raw_Scans/" + raw_scan, read_only=False)
   for sheet in raw_vulns.worksheets:
      raw_vulns_sheet = sheet
      break

   wb = openpyxl.Workbook()
   ws = wb.active
   success, incorrect_column = parse_raw_vulns(owner, raw_vulns_sheet, ws)

   if success:
      wb.save("Raw_Scans/" + owner + "-raw-vulns.xlsx")
   else:
      print("Error with raw vuln column " + str(incorrect_column) + " header for " + owner)

   return wb, ws

def main():
   owners = find_available_raw_scans_owners()

   for owner in owners:
      prep_raw(owner)

main()