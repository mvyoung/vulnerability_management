import time
import openpyxl
from openpyxl import Workbook
import shutil
import sys
import warnings
import re
import os
import platform

# takes care of "UserWarning: Discarded range with reserved name"
warnings.filterwarnings("ignore")

# all files in Owner_Sheets/ must end with _Vuln_Report.xlsx to be detected as a valid vuln sheet
# all files in Raw_Scans/ must start with the owner name or at least be a partial for an owner in all_owners to be detected as a raw scan sheet
# owners cannot have - or _ in them because it will never match filenames which are delimited by - and _ in 
all_owners = ["owner_names"]

header_rows = 1

sec_in_month = 2419200

class Vuln(object):
   # various columns in the vuln spreadsheet
   qid = -1
   ip = ""
   port = -1
   status = ""
   id = ""

   # class function that initializes new Vuln object
   def __init__(self, qid, ip, port, status):
      self.qid = qid
      self.ip = ip
      self.port = port
      self.status = status
      self.id = str(qid) + str(ip) + str(port)

   # function that turns vuln properties into a string
   def print_vuln(self):
      print(str(self.qid) + ", " + str(self.ip) + ", " + str(self.port) + ", " + str(self.status))

   # custom compare function that returns true only if all properties of both vuln objects are the same
   def compare(self, vuln):
      if self.qid != vuln.qid or self.ip != vuln.ip or self.port != vuln.port or self.status != vuln.status:
         return False
      else:
         return True

# function external to the Vuln class that initializes new Vuln object
def create_vuln(qid, ip, port, status):
	vuln = Vuln(qid, ip, port, status)
	return vuln

class VulnDetails(object):
   qid = -1
   ip = ""
   port = -1
   severity = -1

   # ip
   dns = ""
   netbios = ""
   tracking_method = ""
   os = ""
   IPstatus = ""
   # qid
   title = ""
   vuln_status = ""
   type = ""
   # severity >= 3
   #port = -1
   protocol = ""
   FQDN = ""
   ssl = ""
   first_detected = ""
   last_detected = ""
   times_detected = ""
   CVEid = ""
   VendorReference = ""
   bugtraqID = ""
   threat = ""
   impact = ""
   solution = ""
   exploitability = ""
   results = ""
   PCIvuln = ""
   ticket_state = ""
   instance = ""
   category = ""
   date_last_fixed = ""
                      ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed
   def __init__(self, ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed):
      self.qid = qid
      self.ip = ip
      self.port = port
      self.severity = severity

      # ip
      self.dns = dns
      self.netbios = netbios
      self.tracking_method = tracking_method
      self.os = os
      self.IPstatus = IPstatus
      # qid
      self.title = title
      self.vuln_status = vuln_status
      self.type = type
      # severity >= 3
      #port = -1
      self.protocol = protocol
      self.FQDN = FQDN
      self.ssl = ssl
      self.first_detected = first_detected
      self.last_detected = last_detected
      self.times_detected = times_detected
      self.CVEid = CVEid
      self.VendorReference = VendorReference
      self.bugtraqID = bugtraqID
      self.threat = threat
      self.impact = impact
      self.solution = solution
      self.exploitability = exploitability
      self.results = results
      self.PCIvuln = PCIvuln
      self.ticket_state = ticket_state
      self.instance = instance
      self.category = category
      self.date_last_fixed = date_last_fixed

                      #ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed
def create_VulnDetails(ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed):
                             #ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed
   vuln_details = VulnDetails(ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed)
   return vuln_details

class Asset(object):
   # various columns in the inventory spreadsheet
   hostname = ""
   ip = ""
   owner = ""
   status = ""
   pci = ""

   # class function that initializes new Asset object
   def __init__(self, hostname, ip, owner, status, pci):
      self.hostname = hostname
      self.ip = ip
      self.owner = owner
      self.status = status
      self.pci = pci

   # function that turns vuln properties into a string
   def print_asset(self):
      print(str(self.hostname) + ", " + str(self.ip) + ", " + str(self.owner) + ", " + str(self.status))

   # custom compare function that returns true only if all properties of both asset objects are the same
   # TODO: change to does not contain
   def compare(self, vuln):
      if self.hostname != vuln.qid or self.ip != vuln.ip or self.port != vuln.port or self.status != vuln.status:
         return False
      else:
         return True

# function external to the Asset class that initializes new Asset object
def create_asset(hostname, ip, owner, status, pci):
	asset = Asset(hostname, ip, owner, status, pci)
	return asset

def parse_assets():
   inventory = {}

   file = openpyxl.load_workbook("Assets - Servers with App Owner.xlsx", read_only=True)
   for sheet in file.worksheets:
      asset_sheet = sheet
      break

   for line in asset_sheet.iter_rows(row_offset=1):
      ndx = 0
      hostname = ""
      ip = ""
      owner = ""
      status = ""
      pci = ""
      
      for cell in line:
         if ndx == 0:
            hostname = cell.value
         if ndx == 1:
            ip = cell.value
         if ndx == 2:
            owner = cell.value
         if ndx == 5:
            status = cell.value
         if ndx == 6:
            pci = cell.value
         ndx += 1

      cur_asset = create_asset(hostname, ip, owner, status, pci)
      if "(PHY)" not in cur_asset.hostname:
         inventory[cur_asset.hostname] = cur_asset

   return inventory

def check_for_vuln_sheet(owner):
   for file in os.listdir("Owner_Sheets/"):
      if file.endswith(".xlsx"):
         if (int(time.time()) - os.path.getmtime("Owner_Sheets/" + file)) <= sec_in_month:
            if file == owner + "_Vuln_Report.xlsx":
               return True

   return False

def find_available_raw_scans_owners(opt):
   owners = []

   if platform.system() == 'Windows':
      for file in os.listdir("Raw_Scans/"):
         if file.endswith(".xlsx"):
            if (int(time.time()) - os.path.getmtime("Raw_Scans/" + file)) <= sec_in_month:
               if opt == "ALL":
                  # fixes typeerror generator object is not subscriptable
                  # converts generator object into list, grabs first item in list and casts as string
                  # includes only the owners that contain the first string segment of filename which is delimited by - and _
                  item = list([owner for owner in all_owners if re.split(r'-|_', file)[0].lower() in owner.lower()])
                  if item:
                     item = item[0]
                     if file == item + "-raw-vulns.xlsx":
                        if check_for_vuln_sheet(item):
                           owners.append(item)
               else:
                  if re.split(r'-|_', file)[0].lower() in opt.lower():
                     if file == opt + "-raw-vulns.xlsx":
                        if check_for_vuln_sheet(opt):
                           owners.append(opt)
   else:
      print("Not a Windows system")
      sys.exit(1)

   return owners

def determine_mode():
   mode = input("[A]dd new/[U]pdate existing?: ")

   while mode != "A" and  mode != "U":
      mode = input("[A]dd new/[U]pdate existing?: ")

   return mode

def determine_owners():
   owner_name = input("ALL or [owner name]: ")
   owners = []

   if owner_name in all_owners:
      owners = find_available_raw_scans_owners(owner_name)
   elif owner_name == "ALL":
      owners = find_available_raw_scans_owners("ALL")
   else:
      print("incorrect owner parameter. quitting...")
      sys.exit(1)

   return owners

def find_raw_scan_for_owner(owner):
   if platform.system() == 'Windows':
      for file in os.listdir("Raw_Scans/"):
         if file.endswith(".xlsx"):
            if (int(time.time()) - os.path.getmtime("Raw_Scans/" + file)) <= sec_in_month:
               #if re.split(r'-|_', file)[0].lower() in owner.lower():
               if file == owner + "-raw-vulns.xlsx":
                  return file
   else:
      print("Not a Windows system")
      sys.exit(1)

   return None

def open_files(owner):
   #raw_scan = input("Type name of latest biweekly raw scans file for " + owner + ": ")
   raw_scan = find_raw_scan_for_owner(owner)

   if raw_scan is None:
      print("Raw scans for " + owner + " not found. Skipping...")
      return None, None, None

   time_now = time.strftime('%Y-%m-%d-%H%M%S')

   raw_vulns = openpyxl.load_workbook("Raw_Scans/" + raw_scan, read_only=False)
   for sheet in raw_vulns.worksheets:
      raw_vulns_sheet = sheet
      break

   try:
      time_now = time.strftime('%Y-%m-%d-%H%M%S')
      sys.stdout = open('Output/' + owner + '-' + time_now + '-adding-net-new-output.txt', 'w')
   except:
      print("Output file could not be created. Exiting...")
      sys.exit(1)

   return time_now, raw_vulns, raw_vulns_sheet

def parse_os_sheets(linux_sheet, ms_sheet):
	return

def parse_raw_vulns(raw_vulns_sheet):
   raw_dict = {}
   count = 0
   row_count = header_rows

   for row in raw_vulns_sheet.iter_rows(row_offset=header_rows):
      ndx = 0
      qid = -1
      ip = ""
      port = -1
      severity = -1

      #ip
      dns = ""
      netbios = ""
      tracking_method = ""
      os = ""
      IPstatus = ""
      #qid
      title = ""
      vuln_status = ""
      type = ""
      # severity >= 3
      #port = ""
      protocol = ""
      FQDN = ""
      ssl = ""
      first_detected = ""
      last_detected = ""
      times_detected = ""
      CVEid = ""
      VendorReference = ""
      bugtraqID = ""
      threat = ""
      impact = ""
      solution = ""
      exploitability = ""
      results = ""
      PCIvuln = ""
      ticket_state = ""
      instance = ""
      category = ""
      date_last_fixed = ""

      # iterate through all cells in a row to populate all the variables needed for a new vuln instance
      line = 2
      for cell in row:
         if ndx == 0:
            ip = cell.value
         if ndx == 1:
            dns = cell.value
         if ndx == 2:
            netbios = cell.value
         if ndx == 3:
            tracking_method = cell.value
         if ndx == 4:
            os = cell.value
         if ndx == 5:
            IPstatus = cell.value
         if ndx == 6:
            qid = cell.value
         if ndx == 7:
            title = cell.value
         if ndx == 8:
            vuln_status = cell.value
         if ndx == 9:
            type = cell.value
         if ndx == 10:
            severity = cell.value
         if ndx == 11:
            port = cell.value
         if ndx == 12:
            protocol = cell.value
         if ndx == 13:
            FQDN = cell.value
         if ndx == 14:
            ssl = cell.value
         if ndx == 15:
            first_detected = cell.value
         if ndx == 16:
            last_detected = cell.value
         if ndx == 17:
            times_detected = cell.value
         if ndx == 18:
            date_last_fixed = cell.value
         if ndx == 19:
            CVEid = cell.value
         if ndx == 20:
            VendorReference = cell.value
         if ndx == 21:
            bugtraqID = cell.value
         if ndx == 22:
            threat = cell.value
         if ndx == 23:
            impact = cell.value
         if ndx == 24:
            solution = cell.value
         if ndx == 25:
            exploitability = cell.value
         if ndx == 26:
            if cell.value == "yes" or cell.value == "no":
               print(line)
               line += 1
            results = cell.value
         if ndx == 27:
            PCIvuln = cell.value
         if ndx == 28:
            ticket_state = cell.value
         if ndx == 29:
            instance = cell.value
         if ndx == 30:
            category = cell.value
         ndx += 1

      # create new vuln and save to raw vuln dictionary
      cur_vuln = create_vuln(qid, ip, port, "raw")

      cur_details = create_VulnDetails(ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed)
      try:
         if cur_vuln.qid is not None and cur_vuln.ip is not None:
            if cur_vuln.qid is not "QID" and cur_vuln.ip is not "IP":
               #if int(cur_details.severity) in relevant_severity:
               #raw_dict[(cur_vuln.qid, cur_vuln.ip, cur_vuln.port)] = cur_vuln
               raw_dict[cur_vuln.id] = cur_details
               #cur_vuln.print_vuln()
               count += 1
      except TypeError:
         print(str(severity) + " at line " + str(row_count) + " is a non-vuln row")

   return raw_dict, count

def add_new_vulns(owner, workbook, sheet, raw_dict, row_number):
   # loop through raw_dict and add any new vulns to next rows (need to keep track of max row from above)
   print("Adding net new vulns to " + owner)
   for inst in raw_dict:
      #site_owner = determine_site_owner(vuln_dict[id].site)
      #if isinstance(raw_dict[id].qid, int) and isinstance(raw_dict[id].severity, int):

      sheet.cell(column = 1, row = row_number, value = raw_dict[inst].ip)
      sheet.cell(column = 2, row = row_number, value = raw_dict[inst].dns)
      sheet.cell(column = 3, row = row_number, value = raw_dict[inst].netbios)
      # eis notes 4
      # IT notes 5
      # GC change 6
      # owner 7
      sheet.cell(column = 8, row = row_number, value = "new")
      sheet.cell(column = 9, row = row_number, value = raw_dict[inst].os)
      sheet.cell(column = 10, row = row_number, value = raw_dict[inst].qid)
      sheet.cell(column = 11, row = row_number, value = raw_dict[inst].title)
      sheet.cell(column = 12, row = row_number, value = raw_dict[inst].severity)
      sheet.cell(column = 13, row = row_number, value = raw_dict[inst].port)
      sheet.cell(column = 14, row = row_number, value = raw_dict[inst].protocol)
      sheet.cell(column = 15, row = row_number, value = raw_dict[inst].ssl)
      sheet.cell(column = 16, row = row_number, value = raw_dict[inst].first_detected)
      sheet.cell(column = 17, row = row_number, value = raw_dict[inst].last_detected)
      sheet.cell(column = 18, row = row_number, value = raw_dict[inst].times_detected)
      sheet.cell(column = 19, row = row_number, value = raw_dict[inst].CVEid)
      sheet.cell(column = 20, row = row_number, value = raw_dict[inst].VendorReference)
      sheet.cell(column = 21, row = row_number, value = raw_dict[inst].impact)
      sheet.cell(column = 22, row = row_number, value = raw_dict[inst].solution)
      sheet.cell(column = 23, row = row_number, value = raw_dict[inst].PCIvuln)
      sheet.cell(column = 24, row = row_number, value = raw_dict[inst].results)
      sheet.cell(column = 25, row = row_number, value = raw_dict[inst].category)
      sheet.cell(column = 26, row = row_number, value = raw_dict[inst].date_last_fixed)

      print("new vuln " + str(raw_dict[inst].ip) + ", " + str(raw_dict[inst].qid) + ", " + str(raw_dict[inst].port) + " added to master spreadsheet at row " + str(row_number))
      row_number += 1

   try:
      workbook.save("Owner_Sheets/" + owner + "_Vuln_Report.xlsx") 
   except:
      print("ERROR: save failed. Owner_Sheets/" + owner + "_Vuln_Report.xlsx may be open for editing. close and try again.")

def update_vulns(owner, time_now, raw_dict, mode):
   total_completed = 0

   print("Updating " + owner)
   vuln_dict = {}
   completed = 0
   row_number = 2

   # make copy of master spreadsheet for backup purposes
   try:
      #shutil.copy2("Current_2016-07-25/" + owner + "_Vuln_Report.xlsx", "Current_2016-07-25/" + time_now + '-' + owner + "_Vuln_Report.xlsx")
      shutil.copy2("Owner_Sheets/" + owner + "_Vuln_Report.xlsx", "Archive_Sheets/" + owner + "/" + time_now + '-' + owner + "_Vuln_Report.xlsx")
   except shutil.Error as e:
      print("shutil Error: %s" % e)
   except IOError as e:
      print("IOError: %s" % e.strerror)

   file = openpyxl.load_workbook("Owner_Sheets/" + owner + "_Vuln_Report.xlsx", read_only=False)

   for sheet in file.worksheets:
      owner_sheet = sheet
      break

   for line in owner_sheet.iter_rows(row_offset=1):
      ndx = 0
      qid = -1
      ip = ""
      port = -1
      severity = -1

      #ip
      dns = ""
      netbios = ""
      tracking_method = ""
      os = ""
      IPstatus = ""
      #qid
      title = ""
      vuln_status = ""
      type = ""
      # severity >= 3
      #port = ""
      protocol = ""
      FQDN = ""
      ssl = ""
      first_detected = ""
      last_detected = ""
      times_detected = ""
      CVEid = ""
      VendorReference = ""
      bugtraqID = ""
      threat = ""
      impact = ""
      solution = ""
      exploitability = ""
      results = ""
      PCIvuln = ""
      ticket_state = ""
      instance = ""
      category = ""
      date_last_fixed = ""

      # loop through every cell in current row to populate vuln details
      for cell in line:
         if ndx == 0:
            ip = cell.value
         if ndx == 1:
            dns = cell.value
         if ndx == 2:
            netbios = cell.value
         if ndx == 3:
            tracking_method = cell.value
         if ndx == 4:
            os = cell.value
         if ndx == 5:
            IPstatus = cell.value
         if ndx == 6:
            qid = cell.value
         if ndx == 7:
            title = cell.value
         if ndx == 8:
            vuln_status = cell.value
         if ndx == 9:
            type = cell.value
         if ndx == 10:
            severity = cell.value
         if ndx == 11:
            port = cell.value
         if ndx == 12:
            protocol = cell.value
         if ndx == 13:
            FQDN = cell.value
         if ndx == 14:
            ssl = cell.value
         if ndx == 15:
            first_detected = cell.value
         if ndx == 16:
            last_detected = cell.value
         if ndx == 17:
            times_detected = cell.value
         if ndx == 18:
            CVEid = cell.value
         if ndx == 19:
            VendorReference = cell.value
         if ndx == 20:
            bugtraqID = cell.value
         if ndx == 21:
            threat = cell.value
         if ndx == 22:
            impact = cell.value
         if ndx == 23:
            solution = cell.value
         if ndx == 24:
            exploitability = cell.value
         if ndx == 25:
            results = cell.value
         if ndx == 26:
            PCIvuln = cell.value
         if ndx == 27:
            ticket_state = cell.value
         if ndx == 28:
            instance = cell.value
         if ndx == 29:
            category = cell.value
         if ndx == 30:
            date_last_fixed = cell.value
         ndx += 1

      cur_vuln = create_vuln(qid, ip, port, IPstatus)
      cur_details = create_VulnDetails(ip, dns, netbios, tracking_method, os, IPstatus, qid, title, vuln_status, type, severity, port, protocol, FQDN, ssl, first_detected, last_detected, times_detected, CVEid, VendorReference, bugtraqID, threat, impact, solution, exploitability, results, PCIvuln, ticket_state, instance, category, date_last_fixed)
      try:
         if cur_vuln.qid is not None and cur_vuln.ip is not None:
            owner_sheet.cell(column = 1, row = row_number, value = ip)
            owner_sheet.cell(column = 2, row = row_number, value = dns)
            owner_sheet.cell(column = 3, row = row_number, value = netbios)
            # eis notes 4
            # IT notes 5
            # GC change 6
            # owner 7
            # owner_sheet.cell(column = 8, row = row_number, value = "new or completed")
            owner_sheet.cell(column = 9, row = row_number, value = os)
            owner_sheet.cell(column = 10, row = row_number, value = qid)
            owner_sheet.cell(column = 11, row = row_number, value = title)
            owner_sheet.cell(column = 12, row = row_number, value = severity)
            owner_sheet.cell(column = 13, row = row_number, value = port)
            owner_sheet.cell(column = 14, row = row_number, value = protocol)
            owner_sheet.cell(column = 15, row = row_number, value = ssl)
            owner_sheet.cell(column = 16, row = row_number, value = first_detected)
            owner_sheet.cell(column = 17, row = row_number, value = last_detected)
            owner_sheet.cell(column = 18, row = row_number, value = times_detected)
            owner_sheet.cell(column = 19, row = row_number, value = CVEid)
            owner_sheet.cell(column = 20, row = row_number, value = VendorReference)
            owner_sheet.cell(column = 21, row = row_number, value = impact)
            owner_sheet.cell(column = 22, row = row_number, value = solution)
            owner_sheet.cell(column = 23, row = row_number, value = PCIvuln)
            owner_sheet.cell(column = 24, row = row_number, value = results)
            owner_sheet.cell(column = 25, row = row_number, value = category)
            owner_sheet.cell(column = 26, row = row_number, value = date_last_fixed)
            # if current vuln no longer exists in latest Qualys scan, remediation has been completed
            if cur_vuln.id not in raw_dict:
               owner_sheet.cell(column = 8, row = row_number, value = "completed")
               completed += 1
            # if current vuln is in latest Qualys scan, update status to "in progress"
            else:
               owner_sheet.cell(column = 8, row = row_number, value = "in progress")
               owner_sheet.cell(column = 16, row = row_number, value = raw_dict[cur_vuln.id].first_detected)
               owner_sheet.cell(column = 17, row = row_number, value = raw_dict[cur_vuln.id].last_detected)
               owner_sheet.cell(column = 18, row = row_number, value = raw_dict[cur_vuln.id].times_detected)
               owner_sheet.cell(column = 23, row = row_number, value = raw_dict[cur_vuln.id].PCIvuln)
               owner_sheet.cell(column = 26, row = row_number, value = raw_dict[cur_vuln.id].date_last_fixed)
               del raw_dict[cur_vuln.id]
      except TypeError:
         print("ERROR adding vuln in spreadsheet " + owner)

      row_number += 1

   print(owner + " has " + str(len(raw_dict)) + " new vulns")

   if mode == "A":
      add_new_vulns(owner, file, owner_sheet, raw_dict, row_number - 1)

   return

def main():
   #inventory = parse_assets()
   mode = determine_mode()
   owners = determine_owners()
   print(owners)

   for owner in owners:
      time_now, raw_vulns, raw_vulns_sheet = open_files(owner)

      if time_now is not None and raw_vulns is not None and raw_vulns_sheet is not None:
         raw_dict, count = parse_raw_vulns(raw_vulns_sheet)
         update_vulns(owner, time_now, raw_dict, mode)

main()